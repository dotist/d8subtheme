<?php

/**
 * @file
 * Functions to support theming in the gal1base_ui theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function gal1base_ui_preprocess_html(array &$variables) {
  /* Add class to html tag */
  //$variables['html_attributes']->addClass('no-js');

  // Don't display the site name twice on the front page (and potentially others)
  /*if (isset($variables['head_title_array']['title']) && isset($variables['head_title_array']['name']) && ($variables['head_title_array']['title'] == $variables['head_title_array']['name'])) {
    $variables['head_title'] = $variables['head_title_array']['name'];
  }*/
}

/**
 * Implements hook_page_attachments_alter().
 */
function gal1base_ui_page_attachments_alter(array &$page) {
  // Tell IE to use latest rendering engine (not to use compatibility mode).
  /*$ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
    'http-equiv' => 'X-UA-Compatible',
    'content' => 'IE=edge',
    ],
  ];
  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];*/
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function gal1base_ui_preprocess_page(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function gal1base_ui_theme_suggestions_page_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function gal1base_ui_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /*$node = $variables['elements']['#node'];

  if ($variables['elements']['#view_mode'] == "full") {

  }*/
}

/**
 * Implements hook_preprocess_HOOK() for Block document templates.
 */
function gal1base_ui_preprocess_block(array &$variables) {

}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function gal1base_ui_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  $suggestions[] = 'field__' . $element['#view_mode'];
  $suggestions[] = 'field__' . $element['#view_mode'] . '__' . $element['#field_name'];*/
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function gal1base_ui_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
  /*$element = $variables['element'];
  if (isset($element['#attributes']['class']) && in_array('form-composite', $element['#attributes']['class'])) {
    $suggestions[] = 'fieldset__form_composite';
  }*/
}

/**
 * Implements hook_preprocess_node().
 */
function gal1base_ui_preprocess_node(array &$variables) {
  // Default to turning off byline/submitted.
  //$variables['display_submitted'] = FALSE;
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function gal1base_ui_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_form().
 */
function gal1base_ui_preprocess_form(array &$variables) {
  //$variables['attributes']['novalidate'] = 'novalidate';
}

/**
 * Implements hook_preprocess_select().
 */
function gal1base_ui_preprocess_select(array &$variables) {
  //$variables['attributes']['class'][] = 'select-chosen';
}

/**
 * Implements hook_preprocess_field().
 */
function gal1base_ui_preprocess_field(array &$variables, $hook) {
  switch($variables['element']['#field_type']) {
    case 'entity_reference_revisions':

      break;
  }
  /*switch ($variables['element']['#field_name']) {
  }*/
}

/**
 * Implements hook_preprocess_paragraph().
 */
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
function gal1base_ui_preprocess_paragraph(array &$variables) {
  switch($variables['paragraph']->bundle()) {
    case 'item_reference':
      // Add reference link as variable to use in template.
      if (isset($variables['content']['field_content'][0]['#node'])) {
        $node = $variables['content']['field_content'][0]['#node'];
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/'.$node->id());
        $view = entity_view($variables['paragraph'], 'default');
        $render = render($view);
        $markup = Markup::create($render);
        $url = $node->toUrl();
        // $content = render($variables['content']);
        // $inline = [
        //   '#type' => 'inline_template',
        //   '#template' => '{{ node }}',
        //   '#context' => [
        //     'node' => $content->__toString(),
        //   ]
        // ];
        // $link = Link::fromTextAndUrl(
        //   // 'this',
        //   $inline,
        //   $url
        // );
        // // $build = [
        // //   '#type' => 'html_tag',
        // //   '#tag' => 'div',
        // //   '#value' => $render->toR,
        // // ];
        // // $variables['reference_content'] = render($build);
        // $variables['reference_image'] = $inline;
        // $variables['reference_url'] = $url;
        // $variables['nid'] = $node->id();
      }
      break;
  }
}


/**
 * Implements hook_preprocess_details().
 */
function gal1base_ui_preprocess_details(array &$variables) {
  /*$variables['attributes']['class'][] = 'details';
  $variables['summary_attributes']['class'] = 'summary';*/
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function gal1base_ui_theme_suggestions_details_alter(array &$suggestions, array $variables) {

}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function gal1base_ui_preprocess_menu_local_task(array &$variables) {
  //$variables['element']['#link']['url']->setOption('attributes', ['class'=>'rounded']);
}
